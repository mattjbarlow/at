---
- hosts: 127.0.0.1
  environment:
    AWS_SECURITY_TOKEN: "{{ (ansible_env|default({})).AWS_SESSION_TOKEN|default('') }}"
  connection: local

  # Check for prerequisites
  tasks:
  - name: make sure we have java 1.8 installed.
    shell: "java -version 2>&1 |grep 1.8"
    register: javatest_result
    failed_when: "javatest_result.rc != 0"
  - name: make sure jq is installed
    shell: "which jq"
    register: jq_result
    failed_when: "jq_result.rc != 0"
  - name: make sure we have connection to AWS.
    shell: "aws s3 ls"
    register: aws_result
    failed_when: "aws_result.rc != 0"

  # Download requirements
  - name: Get the api gateway importer
    get_url:
      url: https://circle-artifacts.com/gh/ryandub/aws-apigateway-importer/2/artifacts/0/home/ubuntu/aws-apigateway-importer/target/aws-apigateway-importer.jar
      dest: ./aws-apigateway-importer.jar

  # Zip and Upload Lambda Function
  - name: Create S3 Bucket
    s3: bucket={{lambda_s3_bucket}} mode=create
    register: s3bucket

  # !!! From here on out, we assume that if the bucket did not exist, this
  # is a new deployment. If the bucket did exist, this is an update to
  # an existing deployment. !!!

  - name: Zip Lambda module
    shell: cp -ar {{ module_name }} .tmp_lambda_dir
  - shell: pip install -r requirements.txt -t ".tmp_lambda_dir/"
  - shell: cd ".tmp_lambda_dir/"; zip -r ../{{ s3_key }} *; cd -

  - name: Upload Lambda zip file to S3
    s3:
      bucket: "{{lambda_s3_bucket}}"
      mode: put
      object: "{{ s3_key }}"
      src: "{{ s3_key }}"
      overwrite: different
    when:
      s3bucket.changed

  # Import API Gateway
  - name: Update Swagger File
    template: src=../swagger.yml dest=./swagger.ansible.yml
    when:
      s3bucket.changed
  - name: Create the API from the swagger file
    shell: java -jar aws-apigateway-importer.jar --region {{ region }} --create swagger.ansible.yml
    when:
      s3bucket.changed
  - name: Get API Gateway ID
    shell: aws apigateway get-rest-apis |jq -r '.items[] | select(.name | contains("{{ prefix }} At Job Scheduler")) | .id'
    register: apigwid

  # Create AWS Resources
  - name: Create the cloudformation stack if does not exist.
    cloudformation:
      stack_name: "{{ stack_name }}"
      state: "present"
      region: "{{ region }}"
      disable_rollback: true
      template: "template.json"
      template_parameters:
        S3Bucket: "{{ lambda_s3_bucket }}"
        S3Key: "{{ s3_key }}"
        DynamoDBTable: "{{ dynamodb_table_name}}"
        ApiId: "{{ apigwid.stdout }}"
    register: stack
  - name: Set swagger variables from cf output
    set_fact:
      LambdaArn: "{{ stack.stack_outputs['LambdaArn'] }}"
      LambdaName: "{{ stack.stack_outputs['LambdaName'] }}"
      LambdaRole: "{{ stack.stack_outputs['LambdaRole'] }}"
      APIGatewayRole: "{{ stack.stack_outputs['APIGatewayRole'] }}"

  # Add Integrations to API Gateway
  - name: Update Swagger File
    template: src=../swagger.yml dest=./swagger.ansible.yml
    register: swagger
  - name: Update the API Gateway
    shell: java -jar aws-apigateway-importer.jar --region {{ region }} --update {{ apigwid.stdout }} swagger.ansible.yml
    when: swagger.changed

  # Deploy API Gateway to Stage
  - name: Update Swagger File
    template: src=../swagger.yml dest=./swagger.ansible.yml
  - name: Deploy API Gateway to {{ api_gw_stage }}
    shell: "aws apigateway create-deployment --rest-api-id {{ apigwid.stdout }}  --stage-name {{ api_gw_stage }}"
    when: swagger.changed

  # Set Stage Variables
  - name: Update Swagger File
    template: src=../swagger.yml dest=./swagger.ansible.yml
  - name: Update stage variables
    shell: aws apigateway update-stage --rest-api-id {{ apigwid.stdout }} --stage-name {{ api_gw_stage }} --patch-operations op=replace,path=/variables/DBTable,value={{ dynamodb_table_name }}

  # Download Generated Swagger File.  It is recommended to use the
  # Swagger file that gets generated here for import into other tools
  # such as Runscope, Flex, Postman, or Doc generator.

  - name: Export Swagger file from AWS.
    shell: aws apigateway get-export --rest-api-id {{ apigwid.stdout }} --stage-name {{ api_gw_stage }} --export-type swagger ./swagger.awsexport.json
    when: swagger.changed

  - name: Cleanup temporary files
    file: path=.tmp_lambda_dir state=absent
  - file: path=swagger.ansible.yml state=absent
  - file: path={{ s3_key }} state=absent

  # Output useful variables
  - shell: jq -r '.host' swagger.awsexport.json
    register: awshost
  - shell: jq -r '.basePath' swagger.awsexport.json
    register: awsbasepath
  - shell: jq -r '.paths | keys[0]' swagger.awsexport.json
    register: awsfirstpath
  - shell: echo {{ LambdaArn }} | awk -F ":" '{print $NF}'
    register: lambda_function_name
  - debug: msg="URL of API is https://{{ awshost.stdout }}{{ awsbasepath.stdout }}{{ awsfirstpath.stdout }}"
  - debug: msg="Log Group is /aws/lambda/{{ lambda_function_name.stdout }}"
