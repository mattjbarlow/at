---
- hosts: 127.0.0.1
  environment:
    AWS_SECURITY_TOKEN: "{{ (ansible_env|default({})).AWS_SESSION_TOKEN|default('') }}"
  connection: local

  # Check for prerequisites

  - name: make sure we have java 1.8 installed.
    shell: "java -version 2>&1 |grep 1.8"
    register: javatest_result
    failed_when: "javatest_result.rc != 0"
  - name: make sure jq is installed
    shell: "which jq"
    register: jq_result
    failed_when: "jq_result.rc != 0"
  - name: make sure we have connection to AWS.
    shell: "aws s3 ls"
    register: aws_result
    failed_when: "aws_result.rc != 0"

  # Download requirements

  - name: Get the api gateway importer
    get_url:
      url: https://circle-artifacts.com/gh/ryandub/aws-apigateway-importer/2/artifacts/0/home/ubuntu/aws-apigateway-importer/target/aws-apigateway-importer.jar
      dest: ./aws-apigateway-importer.jar

  - name: Run CloudFormation which will create the bucket.
  cloudformation:
      stack_name: "{{ stack_name }}"
      state: "present"
      region: "{{ region }}"
      disable_rollback: true
      template: "template.json"
      template_parameters:
        S3Bucket: "{{ lambda_s3_bucket }}"
        DynamoDBTable: "{{ dynamodb_table_name}}"
        LambdaHandler: "{{ module_name }}.lambda_handler"


  # Upload Lambda function in S3 if it has changed.
  - name: Download python module requirements
    pip: requirements="../requirements.txt"
    extra_args: -t "{{ module_name }}/"
  - name: Package lambda functions
    command: cd "{{ module_name }}"/; zip -r ../"{{ module_name }}".zip *; cd -
  - name: Register checksum of zip file.
    command: sha512sum "{{ module_name }}".zip
    register: zipsum
  s3: bucket={{bucket_name}} object=/{{ module_name }}.zip src="../{{ module_name }}.zip"


 #  # so that we can populate some values
 #  - name: Create the cloudformation stack if does not exist.
 #    cloudformation:
 #      stack_name: "{{ stack_name }}"
 #      stack_policy: "./template_policy.json"
 #      state: "present"
 #      region: "{{ region }}"
 #      disable_rollback: true
 #      template: "template.json"
 #      template_parameters:
 #        S3Bucket: "{{ lambda_s3_bucket }}"
 #        DynamoDBTable: "{{ dynamodb_table_name}}"
 #        ApiId: "{{ existing_apigwid.stdout }}"
 #        LambdaTimeout: "{{ lambda_timeout }}"
 #    register: stack
 #  - name: Set swagger variables from cf output
 #    set_fact:
 #      LambdaArn: "{{ stack.stack_outputs['LambdaArn'] }}"
 #      LambdaName: "{{ stack.stack_outputs['LambdaName'] }}"
 #      LambdaRole: "{{ stack.stack_outputs['LambdaRole'] }}"
 #      LambdaHandler: "{{ stack.stack_outputs['LambdaHandler'] }}"
 #      LambdaTimeout: "{{ stack.stack_outputs['LambdaTimeout'] }}"
 #      LambdaMemory: "{{ stack.stack_outputs['LambdaMemory'] }}"
 #      API_GW_IAM_ARN: "{{ stack.stack_outputs['APIGatewayRole'] }}"
 #      LambdaAuthArn: "{{ stack.stack_outputs['LambdaAuthArn'] }}"
 #      LambdaAuthName: "{{ stack.stack_outputs['LambdaAuthName'] }}"
 #      LambdaAuthHandler: "{{ stack.stack_outputs['LambdaAuthHandler'] }}"

 #  # Upload lambda
 #  - name: Template out the Lambda JSON file
 #    template: src="{{ item.template }}" dest="../lambdas/{{ item.lambda_name }}/lambda.json"
 #    with_items: "{{ lambda_names }}"
 #  - name: Deploy Lambda function to service.
 #    command: "lambda-uploader -p ./lambdas/{{ item.lambda_name }}/"
 #    args:
 #      chdir: ..
 #    with_items: "{{ lambda_names }}"

 # # Create and deploy API Gateway from swagger if it doesn't already exist
 #  - template: src=../swagger.yml dest=./swagger.ansible.yml
 #    register: swaggeryml
 #  - name: Create the API from the swagger file
 #    shell: java -jar aws-apigateway-importer.jar --region {{ region }} --create swagger.ansible.yml 2>&1 | grep 'Created API' | awk '{print $NF}'
 #    register: apigatewayid_created
 #    when: existing_apigwid.stdout == ""
 #  - name: Update apigwid fact if required.
 #    set_fact: apigwid="{{ apigatewayid_created.stdout }}"
 #    when: existing_apigwid.stdout == ""
 #  - name: Display new API Gateway ID
 #    debug: msg="API Gateway ID is {{ apigwid }}"
 #    when: existing_apigwid.stdout == ""
 #  - name: Update CF stack with new API Gateway ID if neccessary
 #    cloudformation:
 #      stack_name: "{{ stack_name }}"
 #      state: "present"
 #      region: "{{ region }}"
 #      disable_rollback: true
 #      template: "template.json"
 #      template_parameters:
 #        S3Bucket: "{{ lambda_s3_bucket }}"
 #        DynamoDBTable: "{{ dynamodb_table_name}}"
 #        ApiId: "{{ apigwid }}"
 #        LambdaTimeout: "{{ lambda_timeout }}"
 #    when: existing_apigwid.stdout == ""

 #  # If APIG didn't exist, deploy if specified
 #  # If APIG exists already, deploy if specified and always update if changed
 #  # TODO(haven): right now it won't deploy and update if you specify a different stage when the swagger hasn't changed
 #  - name: Update the API Gateway only
 #    shell: "java -jar aws-apigateway-importer.jar --region {{ region }} --update {{ apigwid }} swagger.ansible.yml 2>&1"
 #    when: swaggeryml.changed and deploytostage != "True"
 #  - name: Update and deploy the API Gateway
 #    shell: "java -jar aws-apigateway-importer.jar --region {{ region }} --update {{ apigwid }} --deploy {{ api_gw_stage }} swagger.ansible.yml 2>&1"
 #    when: swaggeryml.changed and deploytostage == "True"

 #  # Set up custom authorizer, create on first build. This uses a script that goes through and sets up
 #  # custom authorizer on each API endpoint. Note that we need to deploy one more time after
 #  - name: Check if custom authorizer exists
 #    shell: aws apigateway get-authorizers --rest-api-id {{ apigwid }} | jq -r '.items[] | select(.name=="CatalogAuthorizer") | .id'
 #    register: existing_authorizer
 #  - name: Set up custom authorizer on API Gateway and display authorizer ID
 #    shell: aws apigateway create-authorizer --rest-api-id {{ apigwid }} --name CatalogAuthorizer --type 'TOKEN' --authorizer-uri 'arn:aws:apigateway:{{ region }}:lambda:path/2015-03-31/functions/{{ LambdaAuthArn }}:{{ LambdaVersion }}/invocations' --authorizer-credentials {{ API_GW_IAM_ARN }} --identity-source method.request.header.Authorization --authorizer-result-ttl-in-seconds 3600 |jq -r .id
 #    when: existing_authorizer.stdout == ""
 #  - name: Get custom authorizer ID
 #    shell: aws apigateway get-authorizers --rest-api-id {{ apigwid }} | jq -r '.items[] | select(.name=="CatalogAuthorizer") | .id'
 #    register: authorizer_output
 #  - name: Set authorizer_id fact.
 #    set_fact: authorizer_id="{{ authorizer_output.stdout }}"
 #  - name: Display custom authorizer id
 #    debug: msg="API Gateway Custom Authorizer ID is {{ authorizer_id }}"
 #  - name: Manually set each method to use custom authorizer
 #    shell: python ./enable_custom_auths.py {{ apigwid }} {{ authorizer_id }}
 #  - name: Update API gateway deployment to include custom authorizers
 #    shell: aws apigateway create-deployment --rest-api-id {{ apigwid }} --stage-name {{ api_gw_stage }}
 #    register: new_stage
 #    until: new_stage.stdout.find("id") != -1
 #    retries: 4
 #    delay: 5

 #  # If necessary, create new API key or get existing one
 #  - name: Create API key
 #    shell: aws apigateway create-api-key --name {{ api_key_name }} --enabled --stage-keys restApiId={{ apigwid }},stageName={{ api_gw_stage }} | jq -r .id
 #    register: new_apikeyid
 #    when: existing_apigwid.stdout == "" and api_key == "True"
 #  - set_fact: apikeyid="{{ new_apikeyid.stdout }}"
 #    when: existing_apigwid.stdout == "" and api_key == "True"
 #  - name: Get the API key for this deployment
 #    shell: aws apigateway get-api-keys |jq -r '.items[] | select(.name=="{{ api_key_name }}").id'
 #    register: old_apikeyid
 #    when: existing_apigwid.stdout != "" and api_key == "True"
 #  - set_fact: apikeyid="{{ old_apikeyid.stdout }}"
 #    when: existing_apigwid.stdout != "" and api_key == "True"
 #  - name: Display temporary API key
 #    debug: msg="Temporary API key is {{ apikeyid | default('REDACTED')}}"
 #    when: api_key == "True"

 #  # Set up Cloudwatch
 #  - name: Set API Gateway CloudWatch logging to INFO
 #    shell: aws apigateway update-stage --rest-api-id {{ apigwid }} --stage-name {{ api_gw_stage }} --patch-operations op=replace,path=/*/*/logging/loglevel,value=INFO
 #  - name: Turn on API Gateway CloudWatch Metrics
 #    shell: aws apigateway update-stage --rest-api-id {{ apigwid }} --stage-name {{ api_gw_stage }} --patch-operations op=replace,path=/*/*/metrics/enabled,value=true

 #  - debug: msg="Success. API endpoint is https://{{ apigwid }}.execute-api.{{ region }}.amazonaws.com/{{ api_gw_stage }}"
