swagger: '2.0'
info:
  version: '1.0.0'
  title: At Job Scheduler
  description: A service that schedules lambda functions to run one time.
  contact:
    name: Matt Barlow
    email: mb@mattjbarlow.com
    url: https://mattjbarlow.com
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
basePath: /v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /atq:
    get:
      description: List all jobs
      operationId: list_jobs
      produces:
        - application/json
      responses:
        '200':
          description: at job response
          schema:
            type: array
            items:
              $ref: '#/definitions/atJob'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:769482945897:function:atcommand/invocations"
        credentials: "arn:aws:iam::769482945897:role/apigateway-role"
        httpMethod: "POST"
        requestTemplates:
          application/json: |
            {
              "parameters": {
                "gateway": {
                  "stage" : "$context.stage",
                  "request-id" : "$context.requestId",
                  "resource-path" : "$context.resourcePath",
                  "http-method" : "$context.httpMethod"
                },
                "requestor": {
                  "source-ip" : "$context.identity.sourceIp",
                  "user-agent" : "$context.identity.userAgent",
                  "account-id" : "$context.identity.accountId",
                  "api-key" : "$context.identity.apiKey",
                  "caller" : "$context.identity.caller",
                  "user" : "$context.identity.user",
                  "user-arn" : "$context.identity.userArn"
                },
                "request": {
                  "headers": {
                    #foreach($param in $input.params().header.keySet())
                    "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "query-params": {
                    #foreach($param in $input.params().querystring.keySet())
                    "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "path-params": {
                    #foreach($param in $input.params().path.keySet())
                    "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "body": $input.json('$')
                }
              }
            }
        responses:
          '.*500: Internal Server Error.*':
            statusCode: '500'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 500, \"message\": $input.json('$.errorMessage')}}"
          '.*400: Bad Request.*':
            statusCode: '400'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 400, \"message\": $input.json('$.errorMessage')}}"
          '.*401: Unauthorized.*':
            statusCode: '401'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 401, \"message\": $input.json('$.errorMessage')}}"
          '.*403: Unauthorized.*':
            statusCode: '403'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 403, \"message\": $input.json('$.errorMessage')}}"
          '.*404: Not Found.*':
            statusCode: '404'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 404, \"message\": $input.json('$.errorMessage')}}"
          default:
            statusCode: '200'

    post:
      description: Creates a new at job.
      operationId: create_job
      produces:
        - application/json
      parameters:
        - name: atJob
          in: body
          description: job to add to the at queue.
          required: true
          schema:
            $ref: '#/definitions/newAtJob'
      responses:
        '200':
          description: at job response
          schema:
            type: array
            items:
              $ref: '#/definitions/atJob'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:769482945897:function:atcommand/invocations"
        credentials: "arn:aws:iam::769482945897:role/apigateway-role"
        httpMethod: "POST"
        requestTemplates:
          application/json: |
            {
              "parameters": {
                "gateway": {
                  "stage" : "$context.stage",
                  "request-id" : "$context.requestId",
                  "resource-path" : "$context.resourcePath",
                  "http-method" : "$context.httpMethod"
                },
                "requestor": {
                  "source-ip" : "$context.identity.sourceIp",
                  "user-agent" : "$context.identity.userAgent",
                  "account-id" : "$context.identity.accountId",
                  "api-key" : "$context.identity.apiKey",
                  "caller" : "$context.identity.caller",
                  "user" : "$context.identity.user",
                  "user-arn" : "$context.identity.userArn"
                },
                "request": {
                  "headers": {
                    #foreach($param in $input.params().header.keySet())
                    "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "query-params": {
                    #foreach($param in $input.params().querystring.keySet())
                    "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "path-params": {
                    #foreach($param in $input.params().path.keySet())
                    "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "body": $input.json('$')
                }
              }
            }
        responses:
          '.*500: Internal Server Error.*':
            statusCode: '500'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 500, \"message\": $input.json('$.errorMessage')}}"
          '.*400: Bad Request.*':
            statusCode: '400'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 400, \"message\": $input.json('$.errorMessage')}}"
          '.*401: Unauthorized.*':
            statusCode: '401'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 401, \"message\": $input.json('$.errorMessage')}}"
          '.*403: Unauthorized.*':
            statusCode: '403'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 403, \"message\": $input.json('$.errorMessage')}}"
          '.*404: Not Found.*':
            statusCode: '404'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 404, \"message\": $input.json('$.errorMessage')}}"
          default:
            statusCode: '200'
  /atq/{id}:
    get:
      description: Returns an at job based on ID.
      operationId: describe_job
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of job to fetch
          required: true
          type: string
      responses:
        '200':
          description: at job response
          schema:
            $ref: '#/definitions/atJob'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:769482945897:function:atcommand/invocations"
        credentials: "arn:aws:iam::769482945897:role/apigateway-role"
        httpMethod: "POST"
        requestTemplates:
          application/json: |
            {
              "parameters": {
                "gateway": {
                  "stage" : "$context.stage",
                  "request-id" : "$context.requestId",
                  "resource-path" : "$context.resourcePath",
                  "http-method" : "$context.httpMethod"
                },
                "requestor": {
                  "source-ip" : "$context.identity.sourceIp",
                  "user-agent" : "$context.identity.userAgent",
                  "account-id" : "$context.identity.accountId",
                  "api-key" : "$context.identity.apiKey",
                  "caller" : "$context.identity.caller",
                  "user" : "$context.identity.user",
                  "user-arn" : "$context.identity.userArn"
                },
                "request": {
                  "headers": {
                    #foreach($param in $input.params().header.keySet())
                    "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "query-params": {
                    #foreach($param in $input.params().querystring.keySet())
                    "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "path-params": {
                    #foreach($param in $input.params().path.keySet())
                    "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "body": $input.json('$')
                }
              }
            }
        responses:
          '.*500: Internal Server Error.*':
            statusCode: '500'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 500, \"message\": $input.json('$.errorMessage')}}"
          '.*400: Bad Request.*':
            statusCode: '400'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 400, \"message\": $input.json('$.errorMessage')}}"
          '.*401: Unauthorized.*':
            statusCode: '401'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 401, \"message\": $input.json('$.errorMessage')}}"
          '.*403: Unauthorized.*':
            statusCode: '403'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 403, \"message\": $input.json('$.errorMessage')}}"
          '.*404: Not Found.*':
            statusCode: '404'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 404, \"message\": $input.json('$.errorMessage')}}"
          default:
            statusCode: '200'
    delete:
      description: deletes a single at job based on the ID supplied
      operationId: delete_job
      parameters:
        - name: id
          in: path
          description: ID of at job to delete
          required: true
          type: string
      responses:
        '204':
          description: at job deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:769482945897:function:atcommand/invocations"
        credentials: "arn:aws:iam::769482945897:role/apigateway-role"
        httpMethod: "POST"
        requestTemplates:
          application/json: |
            {
              "parameters": {
                "gateway": {
                  "stage" : "$context.stage",
                  "request-id" : "$context.requestId",
                  "resource-path" : "$context.resourcePath",
                  "http-method" : "$context.httpMethod"
                },
                "requestor": {
                  "source-ip" : "$context.identity.sourceIp",
                  "user-agent" : "$context.identity.userAgent",
                  "account-id" : "$context.identity.accountId",
                  "api-key" : "$context.identity.apiKey",
                  "caller" : "$context.identity.caller",
                  "user" : "$context.identity.user",
                  "user-arn" : "$context.identity.userArn"
                },
                "request": {
                  "headers": {
                    #foreach($param in $input.params().header.keySet())
                    "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "query-params": {
                    #foreach($param in $input.params().querystring.keySet())
                    "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "path-params": {
                    #foreach($param in $input.params().path.keySet())
                    "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                    #end
                  },
                  "body": $input.json('$')
                }
              }
            }
        responses:
          '.*500: Internal Server Error.*':
            statusCode: '500'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 500, \"message\": $input.json('$.errorMessage')}}"
          '.*400: Bad Request.*':
            statusCode: '400'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 400, \"message\": $input.json('$.errorMessage')}}"
          '.*401: Unauthorized.*':
            statusCode: '401'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 401, \"message\": $input.json('$.errorMessage')}}"
          '.*403: Unauthorized.*':
            statusCode: '403'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 403, \"message\": $input.json('$.errorMessage')}}"
          '.*404: Not Found.*':
            statusCode: '404'
            responseTemplates:
              'application/json':
                "{\"error\": {\"code\": 404, \"message\": $input.json('$.errorMessage')}}"
          default:
            statusCode: '200'
definitions:
  atJob:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      lambdaArn:
        type: string
      time:
        type: string
        format: dateTime
  newAtJob:
    type: object
    required:
      - lambdaArn
      - time
    properties:
      id:
        type: string
      lambdaArn:
        type: string
      time:
        type: string
        format: dateTime
  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
