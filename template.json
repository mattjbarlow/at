{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Microservice",
  "Parameters": {
    "S3Bucket": {
      "Description": "The name of the S3 bucket that contains your Lambda function.",
      "Type": "String"
    },
    "S3Key": {
      "Description": "The location and name of your source code .zip file.",
      "Type": "String",
      "Default": "lambda.zip"
    },
    "DynamoDBTable": {
      "Description": "The name of the Dynamo DB Table to hold microservice data.",
      "Type": "String",
      "Default": "microservice-data"
    },
    "ApiId": {
      "Description": "API Gateway App Id. E.g. 1yc6td9zjj",
      "Type": "String",
      "Default": ""
    },
    "LambdaHandler": {
      "Description": "Handler for Lambda function",
      "Type": "String",
      "Default": "lambda.lambda_handler"
    },
    "LambdaTimeout": {
      "Description": "Timeout for Lambda function",
      "Type": "Number",
      "Default": 3
    },
    "LambdaMemory": {
      "Description": "Amount of memory for Lambda function",
      "Type": "Number",
      "Default": 512
    }
  },
  "Conditions": {
    "ApiGatewayDeployed": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "ApiId"}]}]}
  },
  "Resources": {
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [{
          "AttributeName": "id",
          "AttributeType": "S"
        }],
        "KeySchema": [{
            "AttributeName": "id",
            "KeyType": "HASH"
        }],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": {"Ref": "DynamoDBTable"}
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "logs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                   "logs:*"
                ],
                "Resource": "arn:aws:logs:*:*:*"
              }]
            }
          },
          {
            "PolicyName": "dynamodb",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Sid": "1",
                "Effect": "Allow",
                "Action": ["dynamodb:Scan", "dynamodb:PutItem", "dynamodb:GetItem", "dynamodb:DeleteItem", "dynamodb:Query", "dynamodb:UpdateItem", "dynamodb:BatchGetItem"],
                "Resource": [
                  {"Fn::Join" : ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "DynamoDBTable"}, "*"]]}
                ]
              }]
            }
          }
        ]
      }
    },
    "APIGatewayRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "apigateway.amazonaws.com"
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "lambda-invoke",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                  "lambda:InvokeFunction"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },
    "Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "AWS Lambda function is backend to API.",
        "Handler": {"Ref": "LambdaHandler"},
        "MemorySize": {"Ref": "LambdaMemory"},
        "Role": {"Fn::GetAtt": ["LambdaRole", "Arn"]},
        "Runtime": "python2.7",
        "Timeout": {"Ref": "LambdaTimeout"}
      }
    },
    "LambdaPermission": {
      "Condition": "ApiGatewayDeployed",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["Lambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "ApiId"}, "/*"]]}
      }
    },
  },
  "Outputs": {
    "LambdaArn": {
      "Value": {"Fn::GetAtt": ["Lambda", "Arn"]}
    },
    "LambdaName": {
      "Value": {"Ref": "Lambda"}
    },
    "LambdaHandler": {
      "Value": {"Ref": "LambdaHandler"}
    },
    "LambdaTimeout": {
      "Value": {"Ref": "LambdaTimeout"}
    },
    "LambdaRole": {
      "Value": {"Fn::GetAtt": ["LambdaRole", "Arn"]}
    },
    "LambdaMemory": {
      "Value": {"Ref": "LambdaMemory"}
    },
    "APIGatewayRole": {
      "Value": {"Fn::GetAtt": ["APIGatewayRole", "Arn"]}
    },
      "ApiId": {
      "Value": {"Ref": "ApiId"}
    },
  }
}
